layers:

    bluebackground_no_limit:
        data: { source: terrestris}
        draw:
            polygons:
                order: 0
                color: global.water_color

    world_boundaries_labels:
        data: { source: terrestris}
        draw:
            polygons:
                order: 1
                color: global.earth_color
            boundary_dashes:
                order: 2
                color: global.boundary_color
                width: 1px

    waterareas:
        data: { source: terrestris, layer: [ osm_waterareas, osm_waterareas_gen0, osm_waterareas_gen1 ] }
        filter: {not: {tunnel: '1'}}
        draw:
            polygons:
                order: 5
                join: round
                cap: square
                color: global.water_color

    waterways:
        data: { source: terrestris, layer: [ osm_waterways_gen0, osm_waterways_gen1, osm_waterways ] }
        filter: {not: {tunnel: '1'}}

        draw:
            lines:
                order: 5
                join: round
                cap: square

        # TODO: this does not work
        shore_lines:
            filter: { boundary: false, $zoom: { min: 16 }, area: { min: 700 } }
            draw:
                lines-coast:
                    order: 6
                    width: [[16,20px],[18,10m]] # actually visually 1/3
                    color: global.water_color

        river_lines:
            filter: { type: [river, canal] }
            draw:
                lines:
                    color: global.water_color
                    width: [[10, 1px], [17, 6px], [18, 12m]]

        # TODO: this does not work
        stream_lines:
            filter: { type: [stream, ditch, drain], $zoom: { min: 15 }}
            draw:
                lines:
                    color: global.water_color
                    width: [[15, 1px], [17, 2px], [18, 5m]]


    osm_buildings:
        data: { source: terrestris}
        filter: { $zoom: { min: 16 } }

        draw:
            buildings-style:
                order: 40
                color: global.building_color
                # sadly there is no height information at all supplied by the server...
                extrude: false
            buildings-outline-style:
                order: 41
                color: global.building_outline_color
                width: [[16, 1px], [18,2px], [19,4px]]
                extrude: false

    # TODO: this does not work (is this information  supplied at all?)
    osm_barrierways:
        data: { source: terrestris, layer: [osm_barrierways, barrierways, barrier]}
        draw:
            lines:
                order: global.sort_rank

        city_walls:
            filter: { type: [city_wall, dam] }
            draw:
                buildings-outline-style:
                    order: global.sort_rank
                    color: global.building_outline_color
                    width: [[12, 4px], [18, 8m]]
        walls:
            filter: { type: [wall, retaining_wall, fence] }
            draw:
                buildings-outline-style:
                    order: global.sort_rank
                    color: global.building_outline_color
                    width: [[15, 1px], [18, 2m]]

    landusages:
        data: { source: terrestris, layer: [osm_landusages, osm_landusages_gen0, osm_landusages_gen1]}
        draw:
            polygons:
                order: global.sort_rank

        green:
            filter: { type: [ forest, meadow, wood, grass ]}
            draw:
                polygons:
                    color: global.landuse_color

        squares:
            filter: { type: [pedestrian], $zoom: { min: 17 } }
            draw:
                lines:
                    color: global.square_outline_color
                    width: function () { return 1/4 * Math.log($zoom); }
                    order: 200
                polygons:
                    color: global.square_color
                    order: 360

styles:
    boundary_dashes:
        base: lines
        dash: [1, 2]
    buildings-style:
        base: polygons
        blend: opaque
    buildings-outline-style:
        base: lines
        blend: inlay
    lines-coast:
        base: lines
        texcoords: true
        blend: inlay
        shaders:
            uniforms:
                u_waves: 1.5
                u_speed: 0.08
                u_color: [0.6,0.7,1.,1.]
            blocks:
                color: |
                    float x = (v_texcoord.x - 0.495) * 2.;
                    if(x > 0.0) {
                        float opacity = 1.-x;
                        float waves = fract(u_waves*(1.-x)-u_time*u_speed);
                        color = mix(color, u_color, opacity * waves);
                    } else {
                        color.a = 0.0;
                    }
